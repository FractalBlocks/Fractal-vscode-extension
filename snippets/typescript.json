{
	"Fractal Component": {
		"prefix": "fcomp",
		"body": [
			"import {",
			"\tActions,",
			"\tInputs,",
			"\tInterfaces,",
			"\tStyleGroup,",
			"} from 'fractal-core'",
			"import { View, h } from 'fractal-core/interfaces/view'",
			"",
			"export const state = {}",
			"",
			"export type S = typeof state",
			"",
			"export const inputs: Inputs = F => ({",
			"})",
			"",
			"export const actions: Actions<S> = {",
			"}",
			"",
			"const view: View<S> = F => async s => {",
  			"\tlet style = F.ctx.groups.style",
			"",
  			"\treturn h('div', {",
			"\t\tkey: F.ctx.name,",
			"\t\tclass: style('base'),",
  			"\t}, [",
			"\t\t$1",
  			"\t])",
			"}",
			"",
			"export const interfaces: Interfaces = { view }",
			"",
			"const style: StyleGroup = {",
  			"\tbase: {",
			"\t\twidth: '100%',",
			"\t\theight: '100%',",
			"\t\toverflow: 'auto',",
  			"\t},",
			"}",
			"",
			"export const groups = { style }",
			""
		],
		"description": "Basic Fractal Component snippet"
	},
	"Fractal Vnode": {
		"prefix": "fvnode",
		"body": "h('$1', { class: style('$2') }, [$3])",
		"description": "Fractal Vnode"
	},
	"Fractal Index": {
		"prefix": "findex",
		"body": [
			"import {",
			"\tmergeStates,",
			"} from 'fractal-core'",
			"import { runModule } from './module'",
			"import * as root from './Root'",
			"import './hmr'",
			"",
			"declare const ENV: any",
			"",
			"let DEV = ENV === 'development'",
			"",
			";(async () => {",
			"",
			"\tconst app = await runModule(root, DEV)",
			"})()",
			""
		],
		"description": "Basic Fractal Index snippet"
	},
	"Fractal Module": {
		"prefix": "fmod",
		"body": [
			"import {",
			"\trun,",
			"\tComponent,",
			"\t// DEV",
			"\tlogFns,",
			"} from 'fractal-core'",
			"import { viewHandler } from 'fractal-core/interfaces/view'",
			"import { styleHandler } from 'fractal-core/groups/style'",
			"",
			"export const runModule = (root: Component<any>, DEV: boolean, viewCb?)=> run({",
			"\troot,",
			"\tgroups: {",
			"\t\tstyle: styleHandler('', DEV),",
			"\t},",
			"\tinterfaces: {",
			"\t\tview: viewHandler('#app', viewCb),",
			"\t},",
			"...DEV ? logFns : {},",
			"})",
			""
		],
		"description": "Basic Fractal Module snippet"
	},
	"Fractal HMR": {
		"prefix": "fhmr",
		"body": [
			"import {",
			"\thotSwap",
			"} from 'fractal-core'",
			"",
			"declare const FuseBox",
			"",
			"if (process.env.ENV === 'development') {",
			"\tconst customizedHMRPlugin = {",
			"\t\thmrUpdate: async data => {",
			"\t\t\tif (data.type === 'js') {",
			"\t\t\t\tFuseBox.flush()",
			"\t\t\t\tFuseBox.dynamic(data.path, data.content)",
			"\t\t\t\tif (FuseBox.mainFile && data.path.includes('Root')) {",
			"\t\t\t\t\tlet Root = await import('./Root')",
			"\t\t\t\t\t;(window as any).app = await (window as any).app.moduleAPI.attach(Root, (window as any).app, hotSwap)",
			"\t\t\t\t} else if (FuseBox.mainFile) {",
			"\t\t\t\t\t;(window as any).app.moduleAPI.dispose()",
			"\t\t\t\t\tFuseBox.import(FuseBox.mainFile)",
			"\t\t\t\t}",
			"\t\t\t\treturn true",
			"\t\t\t}",
			"\t\t}",
			"\t}",
			"\tif (!process.env.hmrRegistered) {",
			"\t\tprocess.env.hmrRegistered = <any> false",
			"\t\tFuseBox.addPlugin(customizedHMRPlugin)",
			"\t}",
			"}",
			""			  
		],
		"description": "Fractal Hot Module Replacement"
	}

}