{
	"Fractal Component": {
		"prefix": "fcomp",
		"body": [
			"import {",
			"\tActions,",
			"\tInputs,",
			"\tInterfaces,",
			"\tStyleGroup,",
			"} from 'fractal-core'",
			"import { View, h } from 'fractal-core/interfaces/view'",
			"",
			"export const name = 'Root'",
			"",
			"export const state = {}",
			"",
			"export type S = typeof state",
			"",
			"export const inputs: Inputs<S> = ctx => ({",
			"})",
			"",
			"export const actions: Actions<S> = {",
			"}",
			"",
			"const view: View<S> = ({ ctx }) => s => {",
  			"\tlet style = ctx.groups.style",
			"",
  			"\treturn h('div', {",
    			"\t\tkey: ctx.name,",
    			"\t\tclass: { [style.base]: true },",
  			"\t}, [",
    			"\t\t$1",
  			"\t])",
			"}",
			"",
			"export const interfaces: Interfaces = { view }",
			"",
			"const style: StyleGroup = {",
  			"\tbase: {",
    			"\t\twidth: '100%',",
    			"\t\theight: '100%',",
    			"\t\toverflow: 'auto',",
  			"\t},",
			"}",
			"",
			"export const groups = { style }",
			""
		],
		"description": "Basic Fractal Component snippet"
	},
	"Fractal Vnode": {
		"prefix": "fvnode",
		"body": "h('$1', {class: { [style.$2]: true }}, [$3])",
		"description": "Fractal Vnode"
	},
	"Fractal Module": {
		"prefix": "fmod",
		"body": [
			"import {",
			"\trun,",
			"\t// DEV",
			"\tlogFns,",
			"\tmergeStates,",
			"} from 'fractal-core/core'",
			"import { viewHandler } from 'fractal-core/interfaces/view'",
			"import { styleHandler } from 'fractal-core/groups/style'",
			"",
			"import * as root from './Root'",
			"",
			"declare const ENV: any",
			"",
			"let DEV = ENV === 'development'",
			";(async () => {",
			"\tconst app = await run({",
			"\t\troot,",
			"\t\tgroups: {",
			"\t\t\tstyle: styleHandler('app-style', DEV),",
			"\t\t},",
			"\t\tinterfaces: {",
			"\t\t\tview: viewHandler('#app'),",
			"\t\t},",
			"\t\t...DEV ? logFns : {},",
			"\t})",
			"",
			"\t// Hot reload - DEV ONLY",
			"\tif (module.hot) {",
			"\\ttmodule.hot.accept('./Root', () => {",
			"\t\t\tlet m = require('./Root')",
			"\t\t\tapp.moduleAPI.reattach(<any> m, mergeStates)",
			"\t\t})",
			"\t}",
			"})()"
		],
		"description": "Basic Fractal Module snippet"
	}
}